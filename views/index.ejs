<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="stylesheets/style.css" />
    <link rel=stylesheet type=text/css
        href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.2/css/bootstrap.min.css" media="all">
    <title>Picometer</title>
</head>

<body>
    <button class="connect-button">
        Scan
    </button>

    <div style="max-width: 600px; max-height: 400px; padding: 10px">

        <div class="well">
            <h4>D3 Based Real Time Chart
        </div>

        <div id="viewDiv"></div>

    </div>
</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js"></script>
<script src="./javascripts/realtime.js"></script>

<script>

    document.querySelector('button').addEventListener('click', async () => {
        // Raspberry Pi Pico vendor & product id
        const filters = [{ usbVendorId: 11914, usbProductId: 10 }];
        const port = await navigator.serial.requestPort({ filters });

        await port.open({ baudRate: 11520 });

        const textDecoder = new TextDecoderStream();
        const readableStreamClosed = port.readable.pipeTo(textDecoder.writable);
        const reader = textDecoder.readable.getReader();

        while (true) {
            const { value, done } = await reader.read();
            if (done) {
                reader.releaseLock();
                break;
            }

            let currentValue = parseFloat(value)
            console.log(currentValue, value);
        }

        const textEncoder = new TextEncoderStream();
        const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);

        reader.cancel();
        await readableStreamClosed.catch(() => { /* Ignore the error */ });

        writer.close();
        await writableStreamClosed;

        await port.close();
        await port.forget();
    });

    navigator.serial.addEventListener("connect", (event) => {
        // TODO: Automatically open event.target or warn user a port is available.
    });

    navigator.serial.addEventListener("disconnect", (event) => {
        // TODO: Remove |event.target| from the UI.
        // If the serial port was opened, a stream error would be observed as well.
    });

</script>

</html>